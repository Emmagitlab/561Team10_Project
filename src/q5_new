/**
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.apache.hadoop.examples;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.lib.ChainMapper;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.jobcontrol.ControlledJob;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class Query5{
    
  public static class TokenizerMapper 
       extends Mapper<Object, Text, IntWritable, Text>{
    
    private Text custInfo = new Text();
    private IntWritable custID = new IntWritable();
  
    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
      StringTokenizer itr = new StringTokenizer(value.toString());
      String token;
      String tuple[];
      
      while (itr.hasMoreTokens()) {
        token = itr.nextToken();
        tuple = token.split(",");
        custID.set(Integer.parseInt(tuple[0]));  //the ID as key out
        custInfo.set(tuple[1]); //the name as value out
        context.write(custID, custInfo);
      }
    }
  }
  
  public static class TokenizerMapper2 
       extends Mapper<Object, Text, IntWritable, Text>{
    
    private Text transID = new Text();
    private IntWritable custID = new IntWritable();
   
    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
      StringTokenizer itr = new StringTokenizer(value.toString());
      String token;
      String tuple[];
      
      while (itr.hasMoreTokens()) {
        token = itr.nextToken();
        tuple = token.split(",");
        custID.set(Integer.parseInt(tuple[1]));  //custID as key out
        transID.set(tuple[0]); //transID as value out
        context.write(custID, transID);
	// System.out.println(itr.toString());
      }
    }
  }
  
  public static class TransSumReducer 
       extends Reducer<IntWritable, Text , IntWritable , Text>{
    private Text result = new Text();

    public void reduce(IntWritable key, Iterable<Text> values, 
                       Context context
                       ) throws IOException, InterruptedException {
      float sum = 0;
      int count = 0;
      int outkey = 0;
      String totalsum = "unknown";
      String custName = "unknow";
      String info;
      Boolean flag = true;
     
      for (Text val : values) {
         info = val.toString();
         if(flag && info.matches("^[A-Za-z]+$")){   //alpha only is name
             outkey = key.get();
             custName = info;
             flag = false;
         }else{
             count++;
         }
      }
      
      key.set(outkey);
      result.set(","+custName + "," + count);
      context.write(key, result);
    }
  }

  public static class CustNameMapper 
       extends Mapper<Object, Text, IntWritable, Text>{
    
    private IntWritable custID = new IntWritable();
    private Text minTrans = new Text();
//    private int min = Integer.MAX_VALUE;
    
    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
      StringTokenizer itr = new StringTokenizer(value.toString());
      String token;
      String tuple[];
      String results;
      
      while(itr.hasMoreElements()){
          token = itr.nextToken();
          tuple = token.split(",");
          if(tuple.length>=3){
              results = tuple[1]+","+tuple[2];
              custID.set(0);
              minTrans.set(results);
              context.write(custID, minTrans);
          }
      }
      
//      while (itr.hasMoreTokens()) {
//        token = itr.nextToken();
//        tuple = token.split(",");
//        if((tuple.length>=3) && Integer.parseInt(tuple[2]) < min){
//            results = new ArrayList();
//            results.add(tuple[1]+","+tuple[2]);  //custName + transTotal
//        }else if((tuple.length>=3) && Integer.parseInt(tuple[2]) == min){
//            results.add(tuple[1]+","+tuple[2]);  //custName + transTotal
//        }
//      }
//      Iterator<String> rst = results.iterator();
//      while(rst.hasNext()){
//          minTrans.set(rst.next());
//          custID.set(0);
//          context.write(custID, minTrans);
//      }
    }
  }
  
  public static class minTransReducer 
       extends Reducer<IntWritable, Text , Text , Text>{
    private Text result = new Text();
    private int minTran = Integer.MAX_VALUE;
    private ArrayList<String> nameList = new ArrayList();
    private Text outkey = new Text();
    
    public void reduce(IntWritable key, Iterable<Text> values, 
                       Context context
                       ) throws IOException, InterruptedException {
      
     // String info[];
     String tempkey = "";
     
      for (Text val : values) {
         String info[] = val.toString().split(",");
         if((info.length>=2) && Integer.parseInt(info[1])<minTran){   //alpha only is name
             minTran = Integer.parseInt(info[1]);
             nameList = new ArrayList();      //find new min, clear before result
             nameList.add(info[0]+", "+info[1]);  //custname + transTotal
         }else if((info.length>=2) && Integer.parseInt(info[1])==minTran){
             nameList.add(info[0]+", "+info[1]);  //custname + transTotal
         }
      }
      
      Iterator<String> itr = nameList.iterator();
      while(itr.hasNext()){
          outkey.set(tempkey);
          result.set(itr.next());
          context.write(outkey, result);
      }
//      key.set(outkey);
//      result.set(","+custName + "," + count);
//      context.write(key, result);
    }
  }
  
  public static void main(String[] args) throws Exception {
     Configuration conf = new Configuration(false);
     Configuration conf1 = new Configuration(false);
     if (args.length != 3) {
      System.err.println("Usage: query5 <HDFS input file1> <HDFS input file2> <HDFS output file>");
      System.exit(2);
    }
    
    Path toNewMap = new Path("toNextMap"); //the directory in hadoop file system
    
    Job job = new Job(conf, "query5");
    job.setJarByClass(Query5.class);
    //job.setMapperClass(TokenizerMapper.class);
    //job.setMapperClass(TokenizerMapper2.class);
    //job.setCombinerClass(FloatSumReducer.class);
    job.setReducerClass(TransSumReducer.class);
    job.setNumReduceTasks(1);
    job.setOutputKeyClass(IntWritable.class);
    job.setOutputValueClass(Text.class);
    
    MultipleInputs.addInputPath(job, new Path(args[0]), TextInputFormat.class, TokenizerMapper.class);
    MultipleInputs.addInputPath(job, new Path(args[1]), TextInputFormat.class, TokenizerMapper2.class);
    FileOutputFormat.setOutputPath(job, toNewMap);
    
    if(job.waitForCompletion(true)){
        Path nextOutPath = new Path(args[2]);
        runNextMap(nextOutPath);
    }
    
  }
  
  public static void runNextMap(Path output) throws Exception{
    Configuration conf1 = new Configuration(false);
    Job job1 = new Job(conf1, "query5_1");
    job1.setJarByClass(Query5.class);
    job1.setMapperClass(CustNameMapper.class);
    job1.setReducerClass(minTransReducer.class);
    job1.setNumReduceTasks(1); 
    job1.setMapOutputKeyClass(IntWritable.class);
    job1.setMapOutputValueClass(Text.class);
    
    FileInputFormat.setInputPaths(job1, new Path("./toNextMap/part-r-00000"));
    FileOutputFormat.setOutputPath(job1, output);
    System.exit(job1.waitForCompletion(true) ? 0 : 1);
  }
  
}
