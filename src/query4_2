/**
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.apache.hadoop.examples;


import java.io.IOException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Arrays;
import java.util.Iterator;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.util.GenericOptionsParser;
import org.apache.hadoop.io.LongWritable;

public class Query4 {

    public static class TokenizerMapper
            extends Mapper<Object, Text, IntWritable, FloatWritable> {

        private final FloatWritable cInfo = new FloatWritable();
        private final IntWritable countryCode = new IntWritable();

        public void map(Object key, Text value, Context context
        ) throws IOException, InterruptedException {
            StringTokenizer itr = new StringTokenizer(value.toString());
            String token;
            String tuple[];
            ArrayList<String> custInfo = new ArrayList();
            ArrayList<String> transInfo = new ArrayList();
            String val = null;
  
            while (itr.hasMoreTokens()) {
                token = itr.nextToken();
                tuple = token.split(",");
                if(tuple[1].matches("^[A-Za-z]+$"))
                {
                   custInfo.add(tuple[0]+"," + tuple[3]); //custID + countryCode
                }
                else{
                    transInfo.add(tuple[1]+","+tuple[2]); //custID + transTotal
                }
            }
            
            Iterator<String> custItr = custInfo.iterator();
            Iterator<String> transItr = transInfo.iterator();
            String cTuple[];
            String tTuple[];
     
            while(custItr.hasNext()){
                cTuple = (custItr.next()).split(",");
                while(transItr.hasNext()){
                    tTuple = (transItr.next()).split(",");
                    if(cTuple[0].equals(tTuple[0])){
                        countryCode.set(Integer.parseInt(cTuple[1]));
                        cInfo.set(Float.parseFloat(tTuple[1]));
                        context.write(countryCode, cInfo);
                    }
                }
            }
            
        }
    }

    public static class TransTotalReducer
            extends Reducer<IntWritable, FloatWritable, IntWritable, Text> {

        private final Text result = new Text();
        private final IntWritable outkey = new IntWritable();

        public void reduce(IntWritable key, Iterable<FloatWritable> values,
                Context context
        ) throws IOException, InterruptedException {
            Float transTotal;
            int custCount = 0;
            float max = Float.MIN_VALUE;
            float min = Float.MAX_VALUE;
            
            for(FloatWritable val : values){
                custCount++;
                transTotal = val.get();
                if(transTotal < min){
                    min = transTotal;
                }
                if(transTotal > max){
                    max = transTotal;
                }
            }
            
            outkey.set(key.get());  //set key as country code output to result
            result.set("; "+custCount + ", " + min+", "+max);
            context.write(outkey, result);
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        if (args.length != 3) {
            System.err.println("Usage: query4 <HDFS input file1> <HDFS input file2> <HDFS output file>");
            System.exit(2);
        }
        Job job = new Job(conf, "query4");
        job.setJarByClass(Query4.class);
        job.setMapperClass(TokenizerMapper.class);
        job.setMapperClass(TokenizerMapper.class);
        //job.setCombinerClass(FloatSumReducer.class);
        job.setReducerClass(TransTotalReducer.class);
        job.setNumReduceTasks(1);
        job.setMapOutputKeyClass(IntWritable.class);
        job.setMapOutputValueClass(FloatWritable.class);
        job.setOutputKeyClass(IntWritable.class);
        job.setOutputValueClass(Text.class);

        job.setInputFormatClass(TextInputFormat.class);
        FileInputFormat.setInputPaths(job, new Path(args[0]), new Path(args[1]));
//        MultipleInputs.addInputPath(job, new Path(args[0]), TextInputFormat.class, TokenizerMapper.class);
//        MultipleInputs.addInputPath(job, new Path(args[1]), TextInputFormat.class, TokenizerMapper.class);
        FileOutputFormat.setOutputPath(job, new Path(args[2]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
